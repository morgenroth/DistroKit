#!/bin/bash
#
# For some information about how to work with qemu for ARM, please
# refer: http://fedoraproject.org/wiki/Architectures/ARM/HowToQemu


#platformconfig=selected_platformconfig
platformconfig=platform-qemu/selected_platformconfig
# fallback to platformconfig in the same dir as this script
if [ ! -e "$platformconfig" ]; then
	platformconfig=$(dirname $0)/platformconfig
fi

#
# we need information about the platform
#
if [ ! -e "$platformconfig" ]; then
	echo "error: selected_platformconfig does not exist"
	echo "       please use 'ptxdist platform ...' or 'ptxdist --platformconfig=...'"
	exit 1
fi

source $platformconfig

if [ -n "${PTXCONF_PLATFORM}" ]; then
	PTXDIST_PLATFORMDIR="./platform-${PTXCONF_PLATFORM}"
else
	PTXDIST_PLATFORMDIR="."
fi

if [ ! -e "${PTXDIST_PLATFORMDIR}/images/linuximage" ]; then
	echo "error: run 'ptxdist go' first"
	exit 1
fi

if [ ! -e "${PTXDIST_PLATFORMDIR}/images/root.ext2" ]; then
	echo "error: run 'ptxdist images' first"
	exit 1
fi

# the emulator to run
QEMU_EXEC="${PTXDIST_PLATFORMDIR}/sysroot-host/bin/qemu-system-${PTXCONF_ARCH_STRING}"

# disable this, if you want to have some graphics output
QEMU_NOGRAPHIC=-nographic

# Machine to emulate: The default kernel is prepared to run on "versatile pb"
QEMU_MACHINE=pc

#Setting x86 cpu to an Atom processor
QEMU_CPU=n270

if [ -n "${QEMU_USB_DEVICE}" ]; then
	QEMU_USB_DEVICE="-usb -usbdevice host:$QEMU_USB_DEVICE"
fi

# use this to load a kernel directly without grub
QEMU_KERNEL="-kernel ${PTXDIST_PLATFORMDIR}/images/linuximage"

# do the job
${QEMU_EXEC} ${QEMU_NOGRAPHIC} \
	-M ${QEMU_MACHINE} -cpu $QEMU_CPU \
	-drive file=${PTXDIST_PLATFORMDIR}/images/root.ext2,if=virtio,format=raw \
	-m 1G \
	${QEMU_KERNEL} \
	${QEMU_KERNEL_PARAMS} \
	${QEMU_USB_DEVICE} \
	-append "root=/dev/vda console=ttyS0,115200 rw ip=dhcp"
